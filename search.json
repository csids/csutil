[{"path":"https://www.csids.no/csutil/articles/csutil.html","id":"splitting","dir":"Articles","previous_headings":"","what":"Splitting","title":"Intro to csutil","text":"","code":"csutil::easy_split(letters[1:20], size_of_each_group = 3) #> $`1` #> [1] \"a\" \"b\" \"c\" #>  #> $`2` #> [1] \"d\" \"e\" \"f\" #>  #> $`3` #> [1] \"g\" \"h\" \"i\" #>  #> $`4` #> [1] \"j\" \"k\" \"l\" #>  #> $`5` #> [1] \"m\" \"n\" \"o\" #>  #> $`6` #> [1] \"p\" \"q\" \"r\" #>  #> $`7` #> [1] \"s\" \"t\" csutil::easy_split(letters[1:20], number_of_groups = 3) #> $`1` #> [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" #>  #> $`2` #> [1] \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" #>  #> $`3` #> [1] \"o\" \"p\" \"q\" \"r\" \"s\" \"t\""},{"path":"https://www.csids.no/csutil/articles/csutil.html","id":"unnesting-data-frames","dir":"Articles","previous_headings":"","what":"Unnesting data.frames","title":"Intro to csutil","text":"","code":"x <- list(   list(     \"a\" = data.frame(\"v1\"=1),     \"b\" = data.frame(\"v2\"=3)   ),   list(     \"a\" = data.frame(\"v1\"=10),     \"b\" = data.frame(\"v2\"=30),     \"d\" = data.frame(\"v3\"=50)   ) ) print(x) #> [[1]] #> [[1]]$a #>   v1 #> 1  1 #>  #> [[1]]$b #>   v2 #> 1  3 #>  #>  #> [[2]] #> [[2]]$a #>   v1 #> 1 10 #>  #> [[2]]$b #>   v2 #> 1 30 #>  #> [[2]]$d #>   v3 #> 1 50 csutil::unnest_dfs_within_list_of_fully_named_lists(x) #> $a #>    v1 #> 1:  1 #> 2: 10 #>  #> $b #>    v2 #> 1:  3 #> 2: 30 #>  #> $d #>    v3 #> 1: 50"},{"path":"https://www.csids.no/csutil/articles/csutil.html","id":"describing-lists","dir":"Articles","previous_headings":"","what":"Describing lists","title":"Intro to csutil","text":"","code":"csutil::is_fully_named_list(list(1)) #> [1] FALSE csutil::is_fully_named_list(list(\"a\"=1)) #> [1] TRUE  csutil::is_all_list_elements_null_or_df(list(data.frame())) #> [1] TRUE csutil::is_all_list_elements_null_or_df(list(1, NULL)) #> [1] FALSE  csutil::is_all_list_elements_null_or_list(list(1, NULL)) #> [1] FALSE csutil::is_all_list_elements_null_or_list(list(list(), NULL)) #> [1] TRUE  csutil::is_all_list_elements_null_or_fully_named_list(list(list(), NULL)) #> [1] FALSE csutil::is_all_list_elements_null_or_fully_named_list(list(list(\"a\" = 1), NULL)) #> [1] TRUE"},{"path":"https://www.csids.no/csutil/articles/csutil.html","id":"apply-a-function-via-hash-table","dir":"Articles","previous_headings":"","what":"Apply a function via hash table","title":"Intro to csutil","text":"function extracts unique input values, applies given function create hash table (containing unique input/output combinations), matches original input hash table obtain desired output. can dramatically speed computation lot data limited amount unique values.","code":"input <- rep(seq(as.Date(\"2000-01-01\"), as.Date(\"2020-01-01\"), 1), 1000) a1 <- Sys.time() z <- format(input, \"%Y\") a2 <- Sys.time() a2 - a1 #> Time difference of 2.747484 secs  b1 <- Sys.time() z <- csutil::apply_fn_via_hash_table(   input,   format,   \"%Y\" ) b2 <- Sys.time() b2 - b1 #> Time difference of 0.6894748 secs"},{"path":"https://www.csids.no/csutil/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"package proudly brought : Richard Aubrey White. Author, maintainer. . Copyright holder. See changelog contributors. 🙏","code":""},{"path":"https://www.csids.no/csutil/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"White RA (2023). csutil: Common Base-R Problems Relating Lists. https://www.csids./csutil/, https://github.com/csids/csutil.","code":"@Manual{,   title = {csutil: Common Base-R Problems Relating to Lists},   author = {Richard Aubrey White},   year = {2023},   note = {https://www.csids.no/csutil/, https://github.com/csids/csutil}, }"},{"path":[]},{"path":"https://www.csids.no/csutil/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Common Base-R Problems Relating to Lists","text":"csutil contains helpful functions help common base-R problems. Read introduction vignette run help(package=\"csutil\").","code":""},{"path":"https://www.csids.no/csutil/index.html","id":"csverse","dir":"","previous_headings":"","what":"csverse","title":"Common Base-R Problems Relating to Lists","text":"csverse set R packages developed help solve problems frequently occur performing disease surveillance. want install dev versions (access packages haven’t released CRAN), run usethis::edit_r_profile() edit .Rprofile. write : Save file restart R. can now install csverse packages drat repository.","code":"options(   repos = structure(c(     CSVERSE = \"https://www.csids.no/drat/\",     CRAN    = \"https://cran.rstudio.com\"   )) ) install.packages(\"csutil\")"},{"path":"https://www.csids.no/csutil/reference/apply_fn_via_hash_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a function via hash table — apply_fn_via_hash_table","title":"Apply a function via hash table — apply_fn_via_hash_table","text":"function extracts unique input values, applies given function create hash table (containing unique input/output combinations), matches original input hash table obtain desired output.","code":""},{"path":"https://www.csids.no/csutil/reference/apply_fn_via_hash_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a function via hash table — apply_fn_via_hash_table","text":"","code":"apply_fn_via_hash_table(x, fn, ...)"},{"path":"https://www.csids.no/csutil/reference/apply_fn_via_hash_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a function via hash table — apply_fn_via_hash_table","text":"x vector data needs function applied . fn function applied x. ... Arguments passed `fn`.","code":""},{"path":"https://www.csids.no/csutil/reference/apply_fn_via_hash_table.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apply a function via hash table — apply_fn_via_hash_table","text":"can dramatically speed computation lot data limited amount unique values.","code":""},{"path":"https://www.csids.no/csutil/reference/easy_split.html","id":null,"dir":"Reference","previous_headings":"","what":"Split a vector into a list of vectors — easy_split","title":"Split a vector into a list of vectors — easy_split","text":"Easily split list list equally sized vectors.","code":""},{"path":"https://www.csids.no/csutil/reference/easy_split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split a vector into a list of vectors — easy_split","text":"","code":"easy_split(x, size_of_each_group = NULL, number_of_groups = NULL)"},{"path":"https://www.csids.no/csutil/reference/easy_split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split a vector into a list of vectors — easy_split","text":"x vector split size_of_each_group want split `x` number groups, `size_of_each_group` size number_of_groups many equally sized groups want?","code":""},{"path":"https://www.csids.no/csutil/reference/easy_split.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split a vector into a list of vectors — easy_split","text":"list containing equally sized vectors.","code":""},{"path":"https://www.csids.no/csutil/reference/easy_split.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Split a vector into a list of vectors — easy_split","text":"can either specify length list (via `number_of_groups`) length equally sized vectors within list element (via `size_of_each_group`). last element list can shorter elements.","code":""},{"path":"https://www.csids.no/csutil/reference/easy_split.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split a vector into a list of vectors — easy_split","text":"","code":"easy_split(letters[1:20], size_of_each_group = 3) #> $`1` #> [1] \"a\" \"b\" \"c\" #>  #> $`2` #> [1] \"d\" \"e\" \"f\" #>  #> $`3` #> [1] \"g\" \"h\" \"i\" #>  #> $`4` #> [1] \"j\" \"k\" \"l\" #>  #> $`5` #> [1] \"m\" \"n\" \"o\" #>  #> $`6` #> [1] \"p\" \"q\" \"r\" #>  #> $`7` #> [1] \"s\" \"t\" #>  easy_split(letters[1:20], number_of_groups = 3) #> $`1` #> [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" #>  #> $`2` #> [1] \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" #>  #> $`3` #> [1] \"o\" \"p\" \"q\" \"r\" \"s\" \"t\" #>"},{"path":"https://www.csids.no/csutil/reference/is_all_list_elements_null_or_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Are all elements in a list null or data.frames? — is_all_list_elements_null_or_df","title":"Are all elements in a list null or data.frames? — is_all_list_elements_null_or_df","text":"Checks ) `x` list, B) elements `x` either null data.frame.","code":""},{"path":"https://www.csids.no/csutil/reference/is_all_list_elements_null_or_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Are all elements in a list null or data.frames? — is_all_list_elements_null_or_df","text":"","code":"is_all_list_elements_null_or_df(x)"},{"path":"https://www.csids.no/csutil/reference/is_all_list_elements_null_or_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Are all elements in a list null or data.frames? — is_all_list_elements_null_or_df","text":"x object","code":""},{"path":"https://www.csids.no/csutil/reference/is_all_list_elements_null_or_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Are all elements in a list null or data.frames? — is_all_list_elements_null_or_df","text":"Boolean.","code":""},{"path":"https://www.csids.no/csutil/reference/is_all_list_elements_null_or_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Are all elements in a list null or data.frames? — is_all_list_elements_null_or_df","text":"","code":"is_all_list_elements_null_or_df(data.frame()) #> [1] FALSE is_all_list_elements_null_or_df(list(data.frame())) #> [1] TRUE is_all_list_elements_null_or_df(list(1, NULL)) #> [1] FALSE is_all_list_elements_null_or_df(list(data.frame(), NULL)) #> [1] TRUE is_all_list_elements_null_or_df(list(\"a\"=1, 2)) #> [1] FALSE"},{"path":"https://www.csids.no/csutil/reference/is_all_list_elements_null_or_fully_named_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Are all elements in a list null or fully named lists? — is_all_list_elements_null_or_fully_named_list","title":"Are all elements in a list null or fully named lists? — is_all_list_elements_null_or_fully_named_list","text":"Checks ) `x` list, B) elements `x` either null fully named lists.","code":""},{"path":"https://www.csids.no/csutil/reference/is_all_list_elements_null_or_fully_named_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Are all elements in a list null or fully named lists? — is_all_list_elements_null_or_fully_named_list","text":"","code":"is_all_list_elements_null_or_fully_named_list(x)"},{"path":"https://www.csids.no/csutil/reference/is_all_list_elements_null_or_fully_named_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Are all elements in a list null or fully named lists? — is_all_list_elements_null_or_fully_named_list","text":"x object","code":""},{"path":"https://www.csids.no/csutil/reference/is_all_list_elements_null_or_fully_named_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Are all elements in a list null or fully named lists? — is_all_list_elements_null_or_fully_named_list","text":"Boolean.","code":""},{"path":"https://www.csids.no/csutil/reference/is_all_list_elements_null_or_fully_named_list.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Are all elements in a list null or fully named lists? — is_all_list_elements_null_or_fully_named_list","text":"Fully named lists lists element name.","code":""},{"path":"https://www.csids.no/csutil/reference/is_all_list_elements_null_or_fully_named_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Are all elements in a list null or fully named lists? — is_all_list_elements_null_or_fully_named_list","text":"","code":"is_all_list_elements_null_or_fully_named_list(data.frame()) #> [1] FALSE is_all_list_elements_null_or_fully_named_list(list(data.frame())) #> [1] FALSE is_all_list_elements_null_or_fully_named_list(list(1, NULL)) #> [1] FALSE is_all_list_elements_null_or_fully_named_list(list(list(), NULL)) #> [1] FALSE is_all_list_elements_null_or_fully_named_list(list(list(\"a\" = 1), NULL)) #> [1] TRUE is_all_list_elements_null_or_fully_named_list(list(\"a\"=1, 2)) #> [1] FALSE"},{"path":"https://www.csids.no/csutil/reference/is_all_list_elements_null_or_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Are all elements in a list null or lists? — is_all_list_elements_null_or_list","title":"Are all elements in a list null or lists? — is_all_list_elements_null_or_list","text":"Checks ) `x` list, B) elements `x` either null list.","code":""},{"path":"https://www.csids.no/csutil/reference/is_all_list_elements_null_or_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Are all elements in a list null or lists? — is_all_list_elements_null_or_list","text":"","code":"is_all_list_elements_null_or_list(x)"},{"path":"https://www.csids.no/csutil/reference/is_all_list_elements_null_or_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Are all elements in a list null or lists? — is_all_list_elements_null_or_list","text":"x object","code":""},{"path":"https://www.csids.no/csutil/reference/is_all_list_elements_null_or_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Are all elements in a list null or lists? — is_all_list_elements_null_or_list","text":"Boolean.","code":""},{"path":"https://www.csids.no/csutil/reference/is_all_list_elements_null_or_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Are all elements in a list null or lists? — is_all_list_elements_null_or_list","text":"","code":"is_all_list_elements_null_or_list(data.frame()) #> [1] FALSE is_all_list_elements_null_or_list(list(data.frame())) #> [1] FALSE is_all_list_elements_null_or_list(list(1, NULL)) #> [1] FALSE is_all_list_elements_null_or_list(list(list(), NULL)) #> [1] TRUE is_all_list_elements_null_or_list(list(\"a\"=1, 2)) #> [1] FALSE"},{"path":"https://www.csids.no/csutil/reference/is_fully_named_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Is this a fully named list? — is_fully_named_list","title":"Is this a fully named list? — is_fully_named_list","text":"Checks `x` list element named.","code":""},{"path":"https://www.csids.no/csutil/reference/is_fully_named_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is this a fully named list? — is_fully_named_list","text":"","code":"is_fully_named_list(x)"},{"path":"https://www.csids.no/csutil/reference/is_fully_named_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is this a fully named list? — is_fully_named_list","text":"x object","code":""},{"path":"https://www.csids.no/csutil/reference/is_fully_named_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is this a fully named list? — is_fully_named_list","text":"Boolean.","code":""},{"path":"https://www.csids.no/csutil/reference/is_fully_named_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is this a fully named list? — is_fully_named_list","text":"","code":"is_fully_named_list(list()) #> [1] FALSE is_fully_named_list(list(1)) #> [1] FALSE is_fully_named_list(list(\"a\"=1)) #> [1] TRUE is_fully_named_list(list(\"a\"=1, 2)) #> [1] FALSE"},{"path":"https://www.csids.no/csutil/reference/unnest_dfs_within_list_of_fully_named_lists.html","id":null,"dir":"Reference","previous_headings":"","what":"Unnest data.frames within fully named list — unnest_dfs_within_list_of_fully_named_lists","title":"Unnest data.frames within fully named list — unnest_dfs_within_list_of_fully_named_lists","text":"Consider situation function returns list containing two data.frames. function called repeatedly return values stored list, list fully named lists (contains data.frame). Typically, want extract two data.frames nested list structure (rbindlist ).","code":""},{"path":"https://www.csids.no/csutil/reference/unnest_dfs_within_list_of_fully_named_lists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unnest data.frames within fully named list — unnest_dfs_within_list_of_fully_named_lists","text":"","code":"unnest_dfs_within_list_of_fully_named_lists(   x,   returned_name_when_dfs_are_not_nested = \"data\",   ... )"},{"path":"https://www.csids.no/csutil/reference/unnest_dfs_within_list_of_fully_named_lists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unnest data.frames within fully named list — unnest_dfs_within_list_of_fully_named_lists","text":"x list fully named lists (contain data.frames) returned_name_when_dfs_are_not_nested x single list data.frames, name returned? ... parameters passed data.table::rbindlist","code":""},{"path":"https://www.csids.no/csutil/reference/unnest_dfs_within_list_of_fully_named_lists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unnest data.frames within fully named list — unnest_dfs_within_list_of_fully_named_lists","text":"Fully named list, element containing data.table.","code":""},{"path":"https://www.csids.no/csutil/reference/unnest_dfs_within_list_of_fully_named_lists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unnest data.frames within fully named list — unnest_dfs_within_list_of_fully_named_lists","text":"","code":"x <- list(   list(     \"a\" = data.frame(\"v1\"=1),     \"b\" = data.frame(\"v2\"=3)   ),   list(     \"a\" = data.frame(\"v1\"=10),     \"b\" = data.frame(\"v2\"=30),     \"d\" = data.frame(\"v3\"=50)   ),   list(     \"a\" = NULL   ),   NULL ) print(x) #> [[1]] #> [[1]]$a #>   v1 #> 1  1 #>  #> [[1]]$b #>   v2 #> 1  3 #>  #>  #> [[2]] #> [[2]]$a #>   v1 #> 1 10 #>  #> [[2]]$b #>   v2 #> 1 30 #>  #> [[2]]$d #>   v3 #> 1 50 #>  #>  #> [[3]] #> [[3]]$a #> NULL #>  #>  #> [[4]] #> NULL #>  csutil::unnest_dfs_within_list_of_fully_named_lists(x) #> $a #>    v1 #> 1:  1 #> 2: 10 #>  #> $b #>    v2 #> 1:  3 #> 2: 30 #>  #> $d #>    v3 #> 1: 50 #>   x <- list(   data.frame(\"v1\"=1),   data.frame(\"v3\"=50) ) print(x) #> [[1]] #>   v1 #> 1  1 #>  #> [[2]] #>   v3 #> 1 50 #>  csutil::unnest_dfs_within_list_of_fully_named_lists(   x,   returned_name_when_dfs_are_not_nested = \"NAME\",   fill = TRUE ) #> $NAME #>    v1 v3 #> 1:  1 NA #> 2: NA 50 #>"},{"path":"https://www.csids.no/csutil/news/index.html","id":"version-2023425","dir":"Changelog","previous_headings":"","what":"Version 2023.4.25","title":"Version 2023.4.25","text":"CRAN release: 2023-04-25 apply_fn_via_hash_table extracts unique input values, applies given function create hash table (containing unique input/output combinations), matches original input hash table obtain desired output. can dramatically speed computation lot data limited amount unique values. Submitted CRAN","code":""},{"path":"https://www.csids.no/csutil/news/index.html","id":"version-2022620","dir":"Changelog","previous_headings":"","what":"Version 2022.6.20","title":"Version 2022.6.20","text":"Submitted CRAN Added additional documentation.","code":""},{"path":"https://www.csids.no/csutil/news/index.html","id":"version-202268","dir":"Changelog","previous_headings":"","what":"Version 2022.6.8","title":"Version 2022.6.8","text":"Submitted CRAN all_list_elements_null_or_df renamed is_all_list_elements_null_or_df all_list_elements_null_or_list renamed is_all_list_elements_null_or_list all_list_elements_null_or_fully_named_list renamed is_all_list_elements_null_or_fully_named_list split_equal renamed easy_split","code":""},{"path":"https://www.csids.no/csutil/news/index.html","id":"version-2022428","dir":"Changelog","previous_headings":"","what":"Version 2022.4.28","title":"Version 2022.4.28","text":"split_equal (Split vector list equal sized elements) is_fully_named_list (fully named list?) all_list_elements_null_or_df (elements list null data.frames?) all_list_elements_null_or_list (elements list null lists?) all_list_elements_null_or_fully_named_list (elements list null fully named lists?) unnest_dfs_within_fully_named_list (Unnest data.frames within fully named list)","code":""}]
